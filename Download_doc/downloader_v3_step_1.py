#!/usr/bin/env python3

import json, pathlib, sys, requests, tqdm
from urllib.parse import urlparse
number = "16"
# === –ù–ê–°–¢–†–û–ô–ö–ò ===
MANIFEST = pathlib.Path(f"done/{number}/{number}.json")
OUT = pathlib.Path(f"done/{number}/tiff")
USE_JPEG_FALLBACK = True
UA = {"User-Agent": "Mozilla/5.0 (script)"}


# === –ó–ê–ì–†–£–ó–ö–ê –ú–ê–ù–ò–§–ï–°–¢–ê ===
if not MANIFEST.exists():
    sys.exit(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {MANIFEST}")
data = json.loads(MANIFEST.read_text("utf-8"))

canvases = data["sequences"][0]["canvases"]
print("–°—Ç—Ä–∞–Ω–∏—Ü:", len(canvases))

# === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï master-–ø—Ä–µ—Ñ–∏–∫—Å–∞ ===
sample = canvases[0]["@id"]
parsed = urlparse(sample)

try:
    after_iiif = parsed.path.split("/iiif/", 1)[1]
except IndexError:
    sys.exit("‚ùå canvas['@id'] –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '/iiif/'")

segments = after_iiif.split(":")
if len(segments) < 2:
    sys.exit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫ TIFF")

# –£–±–∏—Ä–∞–µ–º 'service' –µ—Å–ª–∏ –µ—Å—Ç—å
if segments[0] == "service":
    segments = segments[1:]

storage_path = "/".join(segments[:-1])
MASTER = f"https://tile.loc.gov/storage-services/master/{storage_path}"
print("Master-prefix:", MASTER)

# === –°–û–ó–î–ê–ù–ò–ï –ü–ê–ü–ö–ò ===
OUT.mkdir(exist_ok=True)

# === –°–ö–ê–ß–ò–í–ê–ù–ò–ï ===
for cv in tqdm.tqdm(canvases, desc="downloading"):
    try:
        canvas_id = cv["@id"]
        file_id = canvas_id.split(":")[-1]
        tif_path = OUT / f"{file_id}.tif"
        jpg_path = tif_path.with_suffix(".jpg")

        # ‚õî –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ —É–∂–µ —Å–∫–∞—á–∞–Ω –ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç
        if tif_path.exists() or jpg_path.exists():
            continue

        # üîΩ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º TIFF
        url = f"{MASTER}/{file_id}.tif"
        r = requests.get(url, headers=UA, timeout=60)

        # üîÅ –ï—Å–ª–∏ TIFF 404 ‚Äî fallback –Ω–∞ JPEG
        if r.status_code == 404 and USE_JPEG_FALLBACK:
            jpeg_url = f"{canvas_id}/full/pct:100/0/default.jpg"
            r = requests.get(jpeg_url, headers=UA, timeout=60)
            r.raise_for_status()
            jpg_path.write_bytes(r.content)
        else:
            r.raise_for_status()
            tif_path.write_bytes(r.content)

    except Exception as e:
        print(f"! –û—à–∏–±–∫–∞ –¥–ª—è {cv.get('label', '?')} ‚Üí {e}")

print("‚úî –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤", OUT.resolve())
